name: "build"

on:
  push:
    branches: [ 2.x, develop, master ]
  pull_request:
    branches: [ 2.x, develop, master ]

jobs:
  # job 1: Test based on java 8 and 17. Do not checkstyle.
  build:
    name: "build"
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        java: [ 8, 17 ]
    steps:
      # step 1
      - name: "Checkout"
        uses: actions/checkout@v3
      # step 2
      - name: "Set up Java JDK"
        uses: actions/setup-java@v3.12.0
        with:
          distribution: 'zulu'
          java-version: ${{ matrix.java }}
      # step 3
      - name: "Print maven version"
        run: ./mvnw -version
      # step 4.1
      - name: "Test, Check style, Check PMD, Check license with Maven and Java8"
        if: matrix.java == '8'
        run: |
          ./mvnw -T 4C clean test \
                 -Dcheckstyle.skip=false -Dpmd.skip=false -Dlicense.skip=false \
                 -Dmaven.git-commit-id.skip=true \
                 -e -B -Dorg.slf4j.simpleLogger.log.org.apache.maven.cli.transfer.Slf4jMavenTransferListener=warn;
      # step 4.2
      - name: "Test with Maven and Java${{ matrix.java }}"
        if: matrix.java != '8'
        run: |
          ./mvnw -T 4C clean test \
                 -Dmaven.git-commit-id.skip=true \
                 -e -B -Dorg.slf4j.simpleLogger.log.org.apache.maven.cli.transfer.Slf4jMavenTransferListener=warn;
      # step 5
      - name: "Codecov"
        if: matrix.java == '8'
        uses: codecov/codecov-action@v3.1.4

  # job 2: Build on 'arm64v8/ubuntu' OS (Skip tests).
  build_arm64-binary:
    runs-on: ubuntu-latest
    if: ${{ github.event_name == 'push' && (github.ref_name == 'develop' || github.ref_name == 'snapshot' || github.ref_name == '2.x') }}
    strategy:
      fail-fast: false
    steps:
      # step 1
      - name: "Checkout"
        uses: actions/checkout@v3
      # step 2
      - name: "Set up QEMU"
        id: qemu
        uses: docker/setup-qemu-action@v3
      # step 3
      - name: "Build with Maven on 'arm64v8/ubuntu:20.04' OS (Skip tests)"
        run: |
          docker run --rm -v ${{ github.workspace }}:/ws:rw --workdir=/ws \
            arm64v8/ubuntu:20.04 \
            bash -exc 'apt-get update -y && \
                       apt-get install python2 -y && \
                       python2 --version && \
                       apt-get install make gcc g++ -y && \
                       apt-get install maven -y && \
                       mvn -version && \
                       mvn clean install \
                           -Prelease-seata \
                           -DskipTests \
                           -Dmaven.git-commit-id.skip=true \
                           -e -B -Dorg.slf4j.simpleLogger.log.org.apache.maven.cli.transfer.Slf4jMavenTransferListener=warn'

  # job 3: SonarCloud analysis
  sonarcloud_analysis:
    name: SonarCloud
    on:
      push:
        branches:
          - master
      pull_request:
        types: [opened, synchronize, reopened]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0  # Shallow clones should be disabled for a better relevancy of analysis

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: 17
          distribution: 'zulu' # Alternative distribution options are available.

      - name: Cache SonarClgit aoud packages
        uses: actions/cache@v3
        with:
          path: ~/.sonar/cache
          key: ${{ runner.os }}-sonar
          restore-keys: ${{ runner.os }}-sonar

      - name: Cache Maven packages
        uses: actions/cache@v3
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2

      - name: Build and analyze
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}  # Needed to get PR information, if any
          SONAR_TOKEN: ${{ secrets.SONAR